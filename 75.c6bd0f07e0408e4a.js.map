{"version":3,"file":"75.c6bd0f07e0408e4a.js","mappings":"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","names":["i0","_r2","ctx_r1","onSubmit","ctx_r0","dynamicForm","jsonData","ReserveBookComponent","_class","constructor","this","_stepperStore","inject","Store","generateFormBuilderService","GenerateFormBuilderService","values","label","value","validators","type","TypeConstantEnum","REQUIRED","placeholder","labelHint","EMAIL","PATTERN","option","TypePattern","ONLY_NUMBER","errorMsg","typeInput","valueToggleShow","description","MIN","ONLY_CHAR","bulkValues","MIN_CHAR","_stepperService","StepperService","formValue$","using","valueChanges","pipe","debounceTime","tap","v","console","log","controls","dispatch","formValueChangeReserve","steppForm","reserveBook","check","patchValue","valid","flagUrl$","next","subscribe","select","selectReserveEntities","shareReplay","ngOnInit","buildFormFromJson","getRawValue","selectors","standalone","features","decls","vars","consts","template","rf","ctx","ReserveBookComponent_div_0_Template","CommonModule","i1","ReactiveFormsModule","FtxFormsComponent"],"sourceRoot":"webpack:///","sources":["./src/app/components/contentSteps/reserveBook/reserve-book.component.html","./src/app/components/contentSteps/reserveBook/reserve-book.component.ts"],"sourcesContent":["<div class=\"w-80\" *ngIf=\"formValue$ | async\">\n  <ngx-ftx-forms\n    (submitEvent)=\"onSubmit()\"\n    [dynamicForm]=\"dynamicForm\"\n    [jsonData]=\"jsonData\"\n  />\n</div>\n","import { Component, inject, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport {\n  ButtonComponent,\n  DataFormBuilder,\n  FormControlLabelComponent,\n  FtxFormsComponent,\n  GenerateFormBuilderService,\n  InputComponent, PatchFormGroupValueDirective,\n  TypeConstantEnum,\n  TypePattern,\n} from '@ngx-ftx-forms';\nimport { debounceTime, shareReplay, tap, using } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { StepperService } from '../../services/stepper.service';\nimport { formValueChangeReserve, selectReserveEntities } from '../../../+state';\n\n@Component({\n  selector: 'reserve-book',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    InputComponent,\n    ButtonComponent,\n    FormControlLabelComponent,\n    PatchFormGroupValueDirective,\n    FtxFormsComponent,\n  ],\n  templateUrl: './reserve-book.component.html',\n  styleUrls: ['./reserve-book.component.scss'],\n})\nexport class ReserveBookComponent implements OnInit {\n  private readonly _stepperStore = inject(Store);\n  readonly generateFormBuilderService: GenerateFormBuilderService = inject(\n    GenerateFormBuilderService\n  );\n  dynamicForm: FormGroup = {} as FormGroup;\n  jsonData: DataFormBuilder = {\n    values: [\n      {\n        label: 'name',\n        value: 'IVan',\n        validators: [{ type: TypeConstantEnum.REQUIRED }],\n        placeholder: 'Isvan Avramescu',\n        labelHint: 'Name for User',\n      },\n      {\n        label: 'email',\n        value: 's@gm.co',\n        validators: [\n          { type: TypeConstantEnum.REQUIRED },\n          { type: TypeConstantEnum.EMAIL },\n        ],\n        labelHint: 'Email Address',\n      },\n      {\n        label: 'TESTa',\n        value: '201',\n        validators: [\n          { type: TypeConstantEnum.REQUIRED },\n          {\n            type: TypeConstantEnum.PATTERN,\n            option: TypePattern.ONLY_NUMBER,\n            errorMsg: 'Only Integer Number',\n          },\n        ],\n        labelHint: 'age',\n      },\n      {\n        label: 'summary',\n        value: true,\n        labelHint: 'Summary Type',\n        typeInput: 'boolean',\n        validators: [{ type: TypeConstantEnum.REQUIRED }],\n      },\n      {\n        label: 'ARE',\n        value: 'dasdasd',\n        labelHint: 'Area Data',\n        typeInput: 'area',\n      },\n      {\n        label: 'toggle',\n        value: true,\n        labelHint: 'Toggle Type',\n        typeInput: 'toggle',\n        valueToggleShow: [\n          { value: true, description: 'TEst' },\n          { value: false, description: 'TEST1' },\n        ],\n        validators: [{ type: TypeConstantEnum.REQUIRED }],\n      },\n      {\n        labelHint: 'Address street',\n        label: 'address',\n        values: [\n          {\n            label: 'street',\n            value: 'Ivan',\n            validators: [\n              {\n                type: TypeConstantEnum.REQUIRED,\n                errorMsg: 'This field it is' + ' must',\n              },\n            ],\n          },\n          {\n            label: 'street2',\n            value: 'Ivan2',\n            validators: [\n              {\n                type: TypeConstantEnum.REQUIRED,\n                errorMsg: 'This field it is' + ' must',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        label: 'personalData',\n        labelHint: 'Personal Data',\n        values: [\n          {\n            label: 'cnp',\n            labelHint: 'Personal Nested',\n            value: '123141232311',\n            validators: [{ type: TypeConstantEnum.MIN, option: 20 }],\n          },\n          {\n            label: 'ds',\n            value: 'TEST',\n            labelHint: 'Personal TEst',\n            validators: [\n              { type: TypeConstantEnum.REQUIRED },\n              {\n                type: TypeConstantEnum.PATTERN,\n                option: TypePattern.ONLY_CHAR,\n                errorMsg: 'Only' + ' char',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        labelHint: 'Course what user take',\n        label: 'course',\n        bulkValues: [\n          {\n            value: 's',\n            label: 'angularPatterns',\n            labelHint: 'Summary TEST',\n            validators: [\n              { type: TypeConstantEnum.REQUIRED },\n              {\n                type: TypeConstantEnum.PATTERN,\n                option: TypePattern.ONLY_CHAR,\n                errorMsg: 'Only' + ' char',\n              },\n              {\n                type: TypeConstantEnum.MIN_CHAR,\n                option: 2,\n                errorMsg: 'Must filled with min 2 char',\n              },\n            ],\n          },\n          {\n            value: '555',\n            label: 'reactPatterns',\n          },\n        ],\n      },\n      {\n        labelHint: 'Name for User',\n        label: 'age',\n        bulkValues: [\n          {\n            value: '2312',\n            label: 'angularPatterns',\n          },\n          {\n            value: '321',\n            label: 'reactPatterns',\n          },\n        ],\n      },\n      {\n        label: 'home',\n        labelHint: 'Name for User',\n        bulkValues: [\n          {\n            value: '444',\n            label: 'Miki',\n          },\n          {\n            label: 'Ivan',\n            bulkValues: [\n              {\n                value: null,\n                validators: [{ type: TypeConstantEnum.REQUIRED }],\n                labelHint: 'Childrens',\n              },\n              { value: 2, placeholder: 'NAMING', labelHint: 'Number' },\n            ],\n          },\n        ],\n      },\n    ],\n  };\n  private _stepperService = inject(StepperService);\n  formValue$ = using(\n    () =>\n      this.dynamicForm.valueChanges\n        .pipe(\n          debounceTime(200),\n          tap((v) => console.log(this.dynamicForm.controls)),\n          tap(\n            (values) =>\n              this._stepperStore.dispatch(formValueChangeReserve(values as any)) //eslint-disable-line\n          ),\n          tap(() => {\n            this._stepperService.steppForm.controls.reserveBook.controls.check.patchValue(\n              this.dynamicForm.valid\n            );\n          }),\n          tap(() => {\n            this._stepperService.flagUrl$.next('reserveBook');\n          })\n        )\n        .subscribe(),\n    () => this._stepperStore.select(selectReserveEntities)\n  ).pipe(shareReplay());\n\n  ngOnInit() {\n    this.dynamicForm = this.generateFormBuilderService.buildFormFromJson(\n      this.jsonData\n    );\n  }\n\n  onSubmit() {\n    if (this.dynamicForm.valid) {\n      console.log(this.dynamicForm.getRawValue());\n      // Handle form submission\n    } else {\n      //\n    }\n  }\n}\n"],"x_google_ignoreList":[]}