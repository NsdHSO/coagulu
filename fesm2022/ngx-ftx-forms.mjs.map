{"version":3,"file":"ngx-ftx-forms.mjs","sources":["../../../projects/ngx-ftx-forms/src/lib/ftx-forms/shared/button/button.component.ts","../../../projects/ngx-ftx-forms/src/lib/ftx-forms/shared/button/button.component.html","../../../projects/ngx-ftx-forms/src/lib/ftx-forms/directive/patch-form-group-value.directive.ts","../../../projects/ngx-ftx-forms/src/lib/ftx-forms/directive/pap-control.directive.ts","../../../projects/ngx-ftx-forms/src/lib/ftx-forms/shared/input/input.component.ts","../../../projects/ngx-ftx-forms/src/lib/ftx-forms/shared/input/input.component.html","../../../projects/ngx-ftx-forms/src/lib/ftx-forms/components/formControlLabel/form-control-label.component.ts","../../../projects/ngx-ftx-forms/src/lib/ftx-forms/components/formControlLabel/form-control-label.component.html","../../../projects/ngx-ftx-forms/src/lib/ftx-forms/service/generative.service.ts","../../../projects/ngx-ftx-forms/src/lib/ftx-forms/utils/constants.enum.ts","../../../projects/ngx-ftx-forms/src/lib/ftx-forms/service/service-generate-form-builder.service.ts","../../../projects/ngx-ftx-forms/src/lib/ftx-forms/ftx-forms.component.ts","../../../projects/ngx-ftx-forms/src/lib/ftx-forms/ftx-forms.component.html","../../../projects/ngx-ftx-forms/src/ngx-ftx-forms.ts"],"sourcesContent":["import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\n\n@Component({\n  selector: 'ngx-button-component',\n  standalone: true,\n  imports: [CommonModule, MatButtonModule],\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonComponent {\n  @Output() marian = new EventEmitter();\n  @Input() public disable: boolean | unknown = false;\n  @Input() public roundedFull: string | unknown = '';\n  @Input() public typeButton = '';\n}\n","<button\n  [type]=\"typeButton\"\n  [disabled]=\"disable\"\n  [ngClass]=\"{ '!bg-blue-700': disable }\"\n  mat-button\n  (click)=\"marian.emit()\"\n  class=\"mat-primary mat-raised-button !bg-blue-500 !text-white p-2\"\n  [className]=\"roundedFull\"\n>\n  <ng-content></ng-content>\n</button>\n","import { Directive, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Directive({\n  selector: '[ngxFormGroupValues]',\n  standalone: true,\n})\nexport class PatchFormGroupValueDirective {\n  @Input() formGroup: FormGroup = {} as FormGroup;\n\n  @Input() set ngxFormGroupValues(val: unknown) {\n    if (!val) {\n      return;\n    }\n    this.formGroup.patchValue(val, { emitEvent: false });\n  }\n}\n","import { Directive } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n  selector: '[ngxControl]',\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: PapControlDirective,\n    },\n  ],\n})\nexport class PapControlDirective implements ControlValueAccessor {\n  writeValue(): void {\n    //\n  }\n  registerOnChange(): void {\n    //\n  }\n  registerOnTouched(): void {\n    //\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PapControlDirective } from '../../directive';\nimport { FormsModule, NgControl, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatRadioModule } from '@angular/material/radio';\n\n@Component({\n  selector: 'ngx-input-component',\n  standalone: true,\n  imports: [\n    CommonModule,\n    PapControlDirective,\n    FormsModule,\n    ReactiveFormsModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatRadioModule,\n  ],\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InputComponent {\n  /**\n   * Type of Input checkbox text\n   */\n  @Input() typeInput? = 'text';\n  /**\n   * Placeholder for input\n   */\n  @Input() placeholderInput? = '';\n  /**\n   * Label for input\n   */\n  @Input() labelInput? = 'Complete label';\n  /**\n   * When input is radio button\n   */\n  @Input() toggleData? = [{ value: false, description: 'default' }];\n  @Input()\n  control?: NgControl | any | unknown; //eslint-disable-line\n}\n","<div class=\"flex flex-col\">\n  <ng-container [ngSwitch]=\"typeInput\">\n    <mat-checkbox\n      *ngSwitchCase=\"'boolean'\"\n      [formControl]=\"control.control\"\n      class=\"border-0 flex ng-dirty ng-touched ng-valid placeholder:text-gray-400 py-1.5 ring-inset rounded-md shadow-sm sm:leading-6 sm:text-sm text-gray-900\"\n    />\n    <ng-container *ngSwitchCase=\"'toggle'\">\n      <mat-radio-group [formControl]=\"control.control\" class=\"flex gap-5\">\n        <div *ngFor=\"let radio of toggleData\" class=\"flex items-center gap-3\">\n          <mat-radio-button [value]=\"radio.value\" />\n          <p class=\"!m-0\">{{ radio.description }}</p>\n        </div>\n      </mat-radio-group>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'area'\">\n      <mat-form-field appearance=\"outline\" class=\"rotate-180 -scale-[0.8]\">\n        <mat-label>{{ labelInput }}</mat-label>\n        <textarea\n          matInput\n          [placeholder]=\"placeholderInput ?? ''\"\n          [formControl]=\"control.control\"\n          class=\"font-semibold !text-xl\"\n        ></textarea>\n      </mat-form-field>\n    </ng-container>\n    <mat-form-field\n      appearance=\"outline\"\n      *ngSwitchDefault\n      class=\"rotate-180 -scale-[0.8]\"\n    >\n      <mat-label>{{ labelInput }}</mat-label>\n      <input\n        matInput\n        [placeholder]=\"placeholderInput ?? ''\"\n        [formControl]=\"control.control\"\n        class=\"font-semibold !text-xl\"\n      />\n    </mat-form-field>\n  </ng-container>\n  <div *ngIf=\"control?.control?.errors?.error\" class=\"pl-3 py-2 text-red-500\">\n    {{ control.control?.errors?.error }}\n  </div>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  inject,\n  Input,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControlDirective,\n  FormControlName,\n  FormsModule,\n  NgControl,\n  NgModel,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { PapControlDirective, InputComponent } from '../../shared';\nimport { MatInputModule } from '@angular/material/input';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\n\n@Component({\n  selector: 'ngx-form-control-label',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    InputComponent,\n    ReactiveFormsModule,\n    MatInputModule,\n  ],\n  templateUrl: './form-control-label.component.html',\n  styleUrls: ['./form-control-label.component.scss'],\n  hostDirectives: [PapControlDirective],\n  providers: [\n    {\n      provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\n      useValue: { subscriptSizing: 'dynamic' },\n    },\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormControlLabelComponent {\n  @Input() label: string | undefined = '';\n  /**\n   * Type of Input checkbox text\n   */\n  @Input() typeInput? = 'text';\n  /**\n   * Placeholder for input\n   */\n  @Input() placeholderInput? = '';\n  /**\n   * Label for input\n   */\n  @Input() labelInput? = 'Complete label';\n  /**\n   * When input is radio button\n   */\n  @Input() toggleData? = [{ value: false, description: 'default' }];\n  ngControl: FormControlDirective | FormControlName | NgModel =\n    injectNgControl();\n}\n\nfunction injectNgControl() {\n  const ngControl = inject(NgControl, { self: true, optional: true });\n  if (!ngControl) {\n    throw new Error('Not ng Controll');\n  }\n  if (\n    ngControl instanceof FormControlDirective ||\n    ngControl instanceof FormControlName ||\n    ngControl instanceof NgModel\n  ) {\n    return ngControl;\n  }\n  throw new Error(`Not of instance of Form Directive Name Model`);\n}\n","<div class=\"flex justify-between items-center\">\n  <p\n    [ngClass]=\"{ invisible: typeInput === 'boolean' }\"\n    class=\"col-span-1 !m-0\"\n    *ngIf=\"label || labelInput\"\n  >\n    {{ label }}\n  </p>\n  <div\n    class=\"flex\"\n    [ngClass]=\"\n      typeInput === 'boolean' ? 'col-span-1 gap-4 items-center' : 'col-span-4'\n    \"\n  >\n    <ngx-input-component\n      [control]=\"ngControl\"\n      [typeInput]=\"typeInput\"\n      [placeholderInput]=\"placeholderInput\"\n      [labelInput]=\"labelInput\"\n      [toggleData]=\"toggleData\"\n    />\n    <p class=\"!m-0\" *ngIf=\"labelInput && typeInput === 'boolean'\">\n      {{ labelInput }}\n    </p>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GenerativeService {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  trackBy<T>(index: number, entity: T) {\n    return index;\n  }\n}\n","export enum ConstantsEnum {\n  ZERO,\n}\n\nexport enum TypeConstantEnum {\n  EMAIL = 'email',\n  MAX = 'max',\n  MIN = 'min',\n  NUMBER = 'number',\n  PATTERN = 'pattern',\n  REQUIRED = 'required',\n  STRING = 'string',\n  MIN_CHAR = 'minChar',\n  ONLY_CHAR = 'only_char',\n}\n\nexport enum TypePattern {\n  ONLY_NUMBER = '^[0-9]+$',\n  ONLY_CHAR = '^[a-zA-Z\\\\s]*$',\n}\n","import { inject, Injectable } from '@angular/core';\nimport {\n  FormArray,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  ValidatorFn,\n} from '@angular/forms';\nimport {\n  DataFormBuilder,\n  NestedValue,\n  Section,\n  Validator,\n} from '../interfaces';\nimport { TypeConstantEnum } from '../utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GenerateFormBuilderService {\n  private readonly _fb = inject(FormBuilder);\n\n  buildFormFromJson(jsonData: DataFormBuilder): any {\n    console.log(this.buildFormGenerate(jsonData));\n    return this.buildFormGenerate(jsonData);\n  }\n\n  extractValidator(item: Section | NestedValue): ValidatorFn[] {\n    let validators: ValidatorFn[] = [];\n    if (item.validators && item.validators.length > 0) {\n      validators = item.validators.map((validatorConfig) =>\n        this.getValidator(validatorConfig)\n      );\n    }\n    return validators;\n  }\n\n  // eslint-disable-next-line\n  getValidator(validatorConfig: Validator): ValidatorFn | any {\n    const { type, option, errorMsg } = validatorConfig;\n    switch (type) {\n      case TypeConstantEnum.REQUIRED:\n        return (control: { value: unknown }) =>\n          control.value\n            ? null\n            : { error: errorMsg || 'This field Is must' || true };\n      case TypeConstantEnum.MIN:\n        if (typeof option === TypeConstantEnum.NUMBER) {\n          // Check if option is a number\n          const numOption = option as number;\n          return (control: { value: number }) =>\n            control.value >= numOption ? null : { error: errorMsg || true };\n        } else {\n          throw new Error('Other Error extract validator'); // Handle other\n          // cases or throw an error\n        }\n      case TypeConstantEnum.MIN_CHAR:\n        if (typeof option === TypeConstantEnum.NUMBER) {\n          // Check if option is a number\n          const numOption = option as number;\n          return (control: { value: number }) =>\n            String(control.value).length >= numOption ||\n            String(control.value).length === 0\n              ? null\n              : { error: errorMsg || true };\n        } else {\n          throw new Error('Other Error extract validator'); // Handle other\n          // cases or throw an error\n        }\n      case TypeConstantEnum.PATTERN:\n        if (\n          typeof option === TypeConstantEnum.STRING ||\n          option instanceof RegExp\n        ) {\n          const pattern =\n            typeof option === TypeConstantEnum.STRING\n              ? new RegExp(option as string)\n              : (option as RegExp);\n          return (control: FormControl) =>\n            (pattern instanceof RegExp ? pattern.test(control.value) : false)\n              ? null\n              : { error: errorMsg || true };\n        } else {\n          throw new Error('Invalid option for pattern validator');\n        }\n      case TypeConstantEnum.EMAIL:\n        return (control: FormControl) => {\n          if (!control.value) {\n            return null; // Allow empty values for the email validator\n          }\n          const emailPattern =\n            /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          return emailPattern.test(control.value)\n            ? null\n            : { error: errorMsg || true };\n        };\n      // Add more cases for other validator types as needed\n      default:\n        // Return null for unknown validator types\n        throw new Error('Please Implement this Validator');\n    }\n  }\n\n  buildFormGenerate(\n    data: DataFormBuilder\n  ): FormGroup | FormArray | FormControl {\n    if (data.values) {\n      //eslint-disable-next-line\n      const group: { [key: string]: any } = {};\n      data.values.forEach((item) => {\n        if (item.values) {\n          group[item.label ?? ''] = this.buildFormGenerate(item);\n        } else if (item.bulkValues) {\n          group[item.label ?? ''] = this._fb.array(\n            item.bulkValues.map((subItem) => this.buildFormGenerate(subItem))\n          );\n        } else {\n          const validators = this.extractValidator(item);\n          group[item.label ?? ''] = this._fb.control(\n            item.value || null,\n            validators\n          );\n        }\n      });\n      return this._fb.group(group);\n    } else if (data.bulkValues) {\n      return this._fb.array(\n        data.bulkValues.map((subItem) => this.buildFormGenerate(subItem))\n      );\n    } else {\n      const validators = this.extractValidator(data);\n      return this._fb.control(data.value || null, validators);\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  inject,\n  Input,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormGroup,\n  isFormArray,\n  isFormControl,\n  isFormGroup,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { DataFormBuilder } from './interfaces';\nimport { FormControlLabelComponent } from './components';\nimport { GenerativeService } from './service';\nimport { ButtonComponent } from './shared';\n\n@Component({\n  selector: 'ngx-ftx-forms',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormControlLabelComponent,\n    ButtonComponent,\n  ],\n  templateUrl: './ftx-forms.component.html',\n  styleUrls: ['./ftx-forms.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FtxFormsComponent {\n  @Input()\n  dynamicForm: FormGroup = {} as FormGroup;\n\n  @Input()\n  jsonData: DataFormBuilder = {} as DataFormBuilder;\n\n  @Output()\n  submitEvent = new EventEmitter();\n\n  controlMapping: any = [];\n  generateFormBuilderService = inject(GenerativeService);\n  protected readonly isFormGroup = isFormGroup;\n  protected readonly isFormControl = isFormControl;\n  protected readonly isFormArray = isFormArray;\n\n  ngOnInit() {\n    if (this.jsonData.values)\n      for (const item of this.jsonData.values) {\n        if (item.label) {\n          this.controlMapping[item.label] = item;\n        }\n      }\n  }\n\n  public ivan(controls: any | undefined) {\n    console.log(controls);\n  }\n}\n","<form\n  [formGroup]=\"dynamicForm\"\n  (ngSubmit)=\"submitEvent.emit(true)\"\n  class=\"p-3 flex flex-col\"\n>\n  <ng-container\n    *ngTemplateOutlet=\"\n      renderControlRecursive;\n      context: {\n        control: dynamicForm,\n        controlKey: null\n      }\n    \"\n  ></ng-container>\n\n  <ngx-button-component\n    [disable]=\"dynamicForm.pristine || dynamicForm.invalid\"\n    roundedFull=\"rounded-md\"\n    >Submit\n  </ngx-button-component>\n</form>\n\n<ng-template\n  #renderControlRecursive\n  let-control=\"control\"\n  let-controlKey=\"controlKey\"\n>\n  <ng-container [ngSwitch]=\"control.constructor.name\">\n    <!-- Render FormArray -->\n    {{ ivan({ control: control, name: control.constructor.name }) }}\n    <ng-container *ngSwitchCase=\"'FormArray'\">\n      <ng-container\n        *ngFor=\"\n          let arrayControl of control.controls;\n          trackBy: generateFormBuilderService.trackBy\n        \"\n      >\n        <ng-container\n          *ngTemplateOutlet=\"\n            renderControlRecursive;\n            context: { control: arrayControl, controlKey: controlKey }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </ng-container>\n\n    <!-- Render FormGroup -->\n    <ng-container *ngSwitchCase=\"'FormGroup'\">\n      <ng-container\n        *ngFor=\"\n          let groupControl of control.controls | keyvalue;\n          trackBy: generateFormBuilderService.trackBy\n        \"\n      >\n        <ng-container\n          *ngTemplateOutlet=\"\n            renderControlRecursive;\n            context: {\n              control: groupControl.value,\n              controlKey: groupControl.key\n            }\n          \"\n        ></ng-container>\n      </ng-container>\n    </ng-container>\n    <!-- Render FormControl -->\n    <ng-container *ngSwitchDefault>\n      <ngx-form-control-label\n        [formControl]=\"control\"\n        [labelInput]=\"controlMapping[controlKey]?.labelHint\"\n        [label]=\"controlKey\"\n        [placeholderInput]=\"controlMapping[controlKey]?.placeholder\"\n        [toggleData]=\"controlMapping[controlKey]?.valueToggleShow\"\n        [typeInput]=\"controlMapping[controlKey]?.typeInput\"\n      ></ngx-form-control-label>\n    </ng-container>\n  </ng-container>\n</ng-template>\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i2","i1.PapControlDirective"],"mappings":"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"}