import { ChangeDetectionStrategy, Component, EventEmitter, inject, Input, Output, } from '@angular/core';
import { CommonModule } from '@angular/common';
import { isFormArray, isFormControl, isFormGroup, ReactiveFormsModule, } from '@angular/forms';
import { FormControlLabelComponent } from './components';
import { GenerativeService } from './service';
import { ButtonComponent } from './shared';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
export class FtxFormsComponent {
    constructor() {
        this.dynamicForm = {};
        this.jsonData = {};
        this.submitEvent = new EventEmitter();
        this.controlMapping = [];
        this.generateFormBuilderService = inject(GenerativeService);
        this.isFormGroup = isFormGroup;
        this.isFormControl = isFormControl;
        this.isFormArray = isFormArray;
    }
    ngOnInit() {
        if (this.jsonData.values)
            for (const item of this.jsonData.values) {
                if (item.label) {
                    this.controlMapping[item.label] = item;
                }
            }
    }
    ivan(controls) {
        console.log(controls);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: FtxFormsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.1", type: FtxFormsComponent, isStandalone: true, selector: "ngx-ftx-forms", inputs: { dynamicForm: "dynamicForm", jsonData: "jsonData" }, outputs: { submitEvent: "submitEvent" }, ngImport: i0, template: "<form\n  [formGroup]=\"dynamicForm\"\n  (ngSubmit)=\"submitEvent.emit(true)\"\n  class=\"p-3 flex flex-col\"\n>\n  <ng-container\n    *ngTemplateOutlet=\"\n      renderControlRecursive;\n      context: {\n        control: dynamicForm,\n        controlKey: null\n      }\n    \"\n  ></ng-container>\n\n  <ngx-button-component\n    [disable]=\"dynamicForm.pristine || dynamicForm.invalid\"\n    roundedFull=\"rounded-md\"\n    >Submit\n  </ngx-button-component>\n</form>\n\n<ng-template\n  #renderControlRecursive\n  let-control=\"control\"\n  let-controlKey=\"controlKey\"\n>\n  <ng-container [ngSwitch]=\"control.constructor.name\">\n    <!-- Render FormArray -->\n    {{ ivan({ control: control, name: control.constructor.name }) }}\n    <ng-container *ngSwitchCase=\"'FormArray'\">\n      <ng-container\n        *ngFor=\"\n          let arrayControl of control.controls;\n          trackBy: generateFormBuilderService.trackBy\n        \"\n      >\n        <ng-container\n          *ngTemplateOutlet=\"\n            renderControlRecursive;\n            context: { control: arrayControl, controlKey: controlKey }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </ng-container>\n\n    <!-- Render FormGroup -->\n    <ng-container *ngSwitchCase=\"'FormGroup'\">\n      <ng-container\n        *ngFor=\"\n          let groupControl of control.controls | keyvalue;\n          trackBy: generateFormBuilderService.trackBy\n        \"\n      >\n        <ng-container\n          *ngTemplateOutlet=\"\n            renderControlRecursive;\n            context: {\n              control: groupControl.value,\n              controlKey: groupControl.key\n            }\n          \"\n        ></ng-container>\n      </ng-container>\n    </ng-container>\n    <!-- Render FormControl -->\n    <ng-container *ngSwitchDefault>\n      <ngx-form-control-label\n        [formControl]=\"control\"\n        [labelInput]=\"controlMapping[controlKey]?.labelHint\"\n        [label]=\"controlKey\"\n        [placeholderInput]=\"controlMapping[controlKey]?.placeholder\"\n        [toggleData]=\"controlMapping[controlKey]?.valueToggleShow\"\n        [typeInput]=\"controlMapping[controlKey]?.typeInput\"\n      ></ngx-form-control-label>\n    </ng-container>\n  </ng-container>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i1.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "pipe", type: i1.KeyValuePipe, name: "keyvalue" }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: FormControlLabelComponent, selector: "ngx-form-control-label", inputs: ["label", "typeInput", "placeholderInput", "labelInput", "toggleData"] }, { kind: "component", type: ButtonComponent, selector: "ngx-button-component", inputs: ["disable", "roundedFull", "typeButton"], outputs: ["marian"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.1", ngImport: i0, type: FtxFormsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-ftx-forms', standalone: true, imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        FormControlLabelComponent,
                        ButtonComponent,
                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: "<form\n  [formGroup]=\"dynamicForm\"\n  (ngSubmit)=\"submitEvent.emit(true)\"\n  class=\"p-3 flex flex-col\"\n>\n  <ng-container\n    *ngTemplateOutlet=\"\n      renderControlRecursive;\n      context: {\n        control: dynamicForm,\n        controlKey: null\n      }\n    \"\n  ></ng-container>\n\n  <ngx-button-component\n    [disable]=\"dynamicForm.pristine || dynamicForm.invalid\"\n    roundedFull=\"rounded-md\"\n    >Submit\n  </ngx-button-component>\n</form>\n\n<ng-template\n  #renderControlRecursive\n  let-control=\"control\"\n  let-controlKey=\"controlKey\"\n>\n  <ng-container [ngSwitch]=\"control.constructor.name\">\n    <!-- Render FormArray -->\n    {{ ivan({ control: control, name: control.constructor.name }) }}\n    <ng-container *ngSwitchCase=\"'FormArray'\">\n      <ng-container\n        *ngFor=\"\n          let arrayControl of control.controls;\n          trackBy: generateFormBuilderService.trackBy\n        \"\n      >\n        <ng-container\n          *ngTemplateOutlet=\"\n            renderControlRecursive;\n            context: { control: arrayControl, controlKey: controlKey }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </ng-container>\n\n    <!-- Render FormGroup -->\n    <ng-container *ngSwitchCase=\"'FormGroup'\">\n      <ng-container\n        *ngFor=\"\n          let groupControl of control.controls | keyvalue;\n          trackBy: generateFormBuilderService.trackBy\n        \"\n      >\n        <ng-container\n          *ngTemplateOutlet=\"\n            renderControlRecursive;\n            context: {\n              control: groupControl.value,\n              controlKey: groupControl.key\n            }\n          \"\n        ></ng-container>\n      </ng-container>\n    </ng-container>\n    <!-- Render FormControl -->\n    <ng-container *ngSwitchDefault>\n      <ngx-form-control-label\n        [formControl]=\"control\"\n        [labelInput]=\"controlMapping[controlKey]?.labelHint\"\n        [label]=\"controlKey\"\n        [placeholderInput]=\"controlMapping[controlKey]?.placeholder\"\n        [toggleData]=\"controlMapping[controlKey]?.valueToggleShow\"\n        [typeInput]=\"controlMapping[controlKey]?.typeInput\"\n      ></ngx-form-control-label>\n    </ng-container>\n  </ng-container>\n</ng-template>\n" }]
        }], propDecorators: { dynamicForm: [{
                type: Input
            }], jsonData: [{
                type: Input
            }], submitEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnR4LWZvcm1zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1mdHgtZm9ybXMvc3JjL2xpYi9mdHgtZm9ybXMvZnR4LWZvcm1zLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1mdHgtZm9ybXMvc3JjL2xpYi9mdHgtZm9ybXMvZnR4LWZvcm1zLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUVMLFdBQVcsRUFDWCxhQUFhLEVBQ2IsV0FBVyxFQUNYLG1CQUFtQixHQUNwQixNQUFNLGdCQUFnQixDQUFDO0FBRXhCLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDOUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFVBQVUsQ0FBQzs7OztBQWUzQyxNQUFNLE9BQU8saUJBQWlCO0lBYjlCO1FBZUUsZ0JBQVcsR0FBYyxFQUFlLENBQUM7UUFHekMsYUFBUSxHQUFvQixFQUFxQixDQUFDO1FBR2xELGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVqQyxtQkFBYyxHQUFRLEVBQUUsQ0FBQztRQUN6QiwrQkFBMEIsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNwQyxnQkFBVyxHQUFHLFdBQVcsQ0FBQztRQUMxQixrQkFBYSxHQUFHLGFBQWEsQ0FBQztRQUM5QixnQkFBVyxHQUFHLFdBQVcsQ0FBQztLQWM5QztJQVpDLFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTTtZQUN0QixLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO2dCQUN2QyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7b0JBQ2QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDO2lCQUN4QzthQUNGO0lBQ0wsQ0FBQztJQUVNLElBQUksQ0FBQyxRQUF5QjtRQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7OEdBM0JVLGlCQUFpQjtrR0FBakIsaUJBQWlCLGdMQ2xDOUIsMnZFQStFQSx5RER0REksWUFBWSx5b0JBQ1osbUJBQW1CLGd0QkFDbkIseUJBQXlCLG1KQUN6QixlQUFlOzsyRkFNTixpQkFBaUI7a0JBYjdCLFNBQVM7K0JBQ0UsZUFBZSxjQUNiLElBQUksV0FDUDt3QkFDUCxZQUFZO3dCQUNaLG1CQUFtQjt3QkFDbkIseUJBQXlCO3dCQUN6QixlQUFlO3FCQUNoQixtQkFHZ0IsdUJBQXVCLENBQUMsTUFBTTs4QkFJL0MsV0FBVztzQkFEVixLQUFLO2dCQUlOLFFBQVE7c0JBRFAsS0FBSztnQkFJTixXQUFXO3NCQURWLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIGluamVjdCxcbiAgSW5wdXQsXG4gIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgRm9ybUdyb3VwLFxuICBpc0Zvcm1BcnJheSxcbiAgaXNGb3JtQ29udHJvbCxcbiAgaXNGb3JtR3JvdXAsXG4gIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG59IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IERhdGFGb3JtQnVpbGRlciB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbExhYmVsQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzJztcbmltcG9ydCB7IEdlbmVyYXRpdmVTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlJztcbmltcG9ydCB7IEJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vc2hhcmVkJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LWZ0eC1mb3JtcycsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBGb3JtQ29udHJvbExhYmVsQ29tcG9uZW50LFxuICAgIEJ1dHRvbkNvbXBvbmVudCxcbiAgXSxcbiAgdGVtcGxhdGVVcmw6ICcuL2Z0eC1mb3Jtcy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2Z0eC1mb3Jtcy5jb21wb25lbnQuc2NzcyddLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgRnR4Rm9ybXNDb21wb25lbnQge1xuICBASW5wdXQoKVxuICBkeW5hbWljRm9ybTogRm9ybUdyb3VwID0ge30gYXMgRm9ybUdyb3VwO1xuXG4gIEBJbnB1dCgpXG4gIGpzb25EYXRhOiBEYXRhRm9ybUJ1aWxkZXIgPSB7fSBhcyBEYXRhRm9ybUJ1aWxkZXI7XG5cbiAgQE91dHB1dCgpXG4gIHN1Ym1pdEV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbnRyb2xNYXBwaW5nOiBhbnkgPSBbXTtcbiAgZ2VuZXJhdGVGb3JtQnVpbGRlclNlcnZpY2UgPSBpbmplY3QoR2VuZXJhdGl2ZVNlcnZpY2UpO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgaXNGb3JtR3JvdXAgPSBpc0Zvcm1Hcm91cDtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGlzRm9ybUNvbnRyb2wgPSBpc0Zvcm1Db250cm9sO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgaXNGb3JtQXJyYXkgPSBpc0Zvcm1BcnJheTtcblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5qc29uRGF0YS52YWx1ZXMpXG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5qc29uRGF0YS52YWx1ZXMpIHtcbiAgICAgICAgaWYgKGl0ZW0ubGFiZWwpIHtcbiAgICAgICAgICB0aGlzLmNvbnRyb2xNYXBwaW5nW2l0ZW0ubGFiZWxdID0gaXRlbTtcbiAgICAgICAgfVxuICAgICAgfVxuICB9XG5cbiAgcHVibGljIGl2YW4oY29udHJvbHM6IGFueSB8IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUubG9nKGNvbnRyb2xzKTtcbiAgfVxufVxuIiwiPGZvcm1cbiAgW2Zvcm1Hcm91cF09XCJkeW5hbWljRm9ybVwiXG4gIChuZ1N1Ym1pdCk9XCJzdWJtaXRFdmVudC5lbWl0KHRydWUpXCJcbiAgY2xhc3M9XCJwLTMgZmxleCBmbGV4LWNvbFwiXG4+XG4gIDxuZy1jb250YWluZXJcbiAgICAqbmdUZW1wbGF0ZU91dGxldD1cIlxuICAgICAgcmVuZGVyQ29udHJvbFJlY3Vyc2l2ZTtcbiAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgY29udHJvbDogZHluYW1pY0Zvcm0sXG4gICAgICAgIGNvbnRyb2xLZXk6IG51bGxcbiAgICAgIH1cbiAgICBcIlxuICA+PC9uZy1jb250YWluZXI+XG5cbiAgPG5neC1idXR0b24tY29tcG9uZW50XG4gICAgW2Rpc2FibGVdPVwiZHluYW1pY0Zvcm0ucHJpc3RpbmUgfHwgZHluYW1pY0Zvcm0uaW52YWxpZFwiXG4gICAgcm91bmRlZEZ1bGw9XCJyb3VuZGVkLW1kXCJcbiAgICA+U3VibWl0XG4gIDwvbmd4LWJ1dHRvbi1jb21wb25lbnQ+XG48L2Zvcm0+XG5cbjxuZy10ZW1wbGF0ZVxuICAjcmVuZGVyQ29udHJvbFJlY3Vyc2l2ZVxuICBsZXQtY29udHJvbD1cImNvbnRyb2xcIlxuICBsZXQtY29udHJvbEtleT1cImNvbnRyb2xLZXlcIlxuPlxuICA8bmctY29udGFpbmVyIFtuZ1N3aXRjaF09XCJjb250cm9sLmNvbnN0cnVjdG9yLm5hbWVcIj5cbiAgICA8IS0tIFJlbmRlciBGb3JtQXJyYXkgLS0+XG4gICAge3sgaXZhbih7IGNvbnRyb2w6IGNvbnRyb2wsIG5hbWU6IGNvbnRyb2wuY29uc3RydWN0b3IubmFtZSB9KSB9fVxuICAgIDxuZy1jb250YWluZXIgKm5nU3dpdGNoQ2FzZT1cIidGb3JtQXJyYXknXCI+XG4gICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICpuZ0Zvcj1cIlxuICAgICAgICAgIGxldCBhcnJheUNvbnRyb2wgb2YgY29udHJvbC5jb250cm9scztcbiAgICAgICAgICB0cmFja0J5OiBnZW5lcmF0ZUZvcm1CdWlsZGVyU2VydmljZS50cmFja0J5XG4gICAgICAgIFwiXG4gICAgICA+XG4gICAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgICAqbmdUZW1wbGF0ZU91dGxldD1cIlxuICAgICAgICAgICAgcmVuZGVyQ29udHJvbFJlY3Vyc2l2ZTtcbiAgICAgICAgICAgIGNvbnRleHQ6IHsgY29udHJvbDogYXJyYXlDb250cm9sLCBjb250cm9sS2V5OiBjb250cm9sS2V5IH1cbiAgICAgICAgICBcIlxuICAgICAgICA+XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC9uZy1jb250YWluZXI+XG5cbiAgICA8IS0tIFJlbmRlciBGb3JtR3JvdXAgLS0+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdTd2l0Y2hDYXNlPVwiJ0Zvcm1Hcm91cCdcIj5cbiAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgKm5nRm9yPVwiXG4gICAgICAgICAgbGV0IGdyb3VwQ29udHJvbCBvZiBjb250cm9sLmNvbnRyb2xzIHwga2V5dmFsdWU7XG4gICAgICAgICAgdHJhY2tCeTogZ2VuZXJhdGVGb3JtQnVpbGRlclNlcnZpY2UudHJhY2tCeVxuICAgICAgICBcIlxuICAgICAgPlxuICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgKm5nVGVtcGxhdGVPdXRsZXQ9XCJcbiAgICAgICAgICAgIHJlbmRlckNvbnRyb2xSZWN1cnNpdmU7XG4gICAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICAgIGNvbnRyb2w6IGdyb3VwQ29udHJvbC52YWx1ZSxcbiAgICAgICAgICAgICAgY29udHJvbEtleTogZ3JvdXBDb250cm9sLmtleVxuICAgICAgICAgICAgfVxuICAgICAgICAgIFwiXG4gICAgICAgID48L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwhLS0gUmVuZGVyIEZvcm1Db250cm9sIC0tPlxuICAgIDxuZy1jb250YWluZXIgKm5nU3dpdGNoRGVmYXVsdD5cbiAgICAgIDxuZ3gtZm9ybS1jb250cm9sLWxhYmVsXG4gICAgICAgIFtmb3JtQ29udHJvbF09XCJjb250cm9sXCJcbiAgICAgICAgW2xhYmVsSW5wdXRdPVwiY29udHJvbE1hcHBpbmdbY29udHJvbEtleV0/LmxhYmVsSGludFwiXG4gICAgICAgIFtsYWJlbF09XCJjb250cm9sS2V5XCJcbiAgICAgICAgW3BsYWNlaG9sZGVySW5wdXRdPVwiY29udHJvbE1hcHBpbmdbY29udHJvbEtleV0/LnBsYWNlaG9sZGVyXCJcbiAgICAgICAgW3RvZ2dsZURhdGFdPVwiY29udHJvbE1hcHBpbmdbY29udHJvbEtleV0/LnZhbHVlVG9nZ2xlU2hvd1wiXG4gICAgICAgIFt0eXBlSW5wdXRdPVwiY29udHJvbE1hcHBpbmdbY29udHJvbEtleV0/LnR5cGVJbnB1dFwiXG4gICAgICA+PC9uZ3gtZm9ybS1jb250cm9sLWxhYmVsPlxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L25nLWNvbnRhaW5lcj5cbjwvbmctdGVtcGxhdGU+XG4iXX0=